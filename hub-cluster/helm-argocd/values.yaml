dex:
  enabled: false # Disable dex since we are not using

redis-ha:
  enabled: true

controller:
  serviceAccount:
    annotations:
      eks.amazonaws.com/role-arn: ${irsa_iam_role_arn}
  replicas: 10 # Additional replicas will cause sharding of managed clusters across number of replicas.
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: true
  env:
  - name: ARGOCD_K8S_CLIENT_QPS #required for Crossplane too many CRDs https://github.com/argoproj/argo-cd/pull/448
    value: "300"

repoServer:
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetMemoryUtilizationPercentage: 80
    targetCPUUtilizationPercentage: 90
  resources: # Adjust based on your specific use case (required for HPA)
    requests:
      cpu : "100m"
      memory : "256Mi"
    limits:
      cpu: "200m"
      memory: "512Mi"
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: true

applicationSet:
  replicaCount: 1 # The controller doesn't scale horizontally, is active-standby replicas
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: true

server:
  serviceAccount:
    annotations:
      eks.amazonaws.com/role-arn: ${irsa_iam_role_arn}
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetMemoryUtilizationPercentage: 80
    targetCPUUtilizationPercentage: 90
  resources: # Adjust based on your specific use case (required for HPA)
    requests:
      cpu : "100m"
      memory : "256Mi"
    limits:
      cpu: "1000m"
      memory: "2048Mi"
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: true
  service:
    type: ${enable_ingress ? "ClusterIP" : "LoadBalancer"}
  ingress:
    enabled: ${enable_ingress}
    annotations:
      alb.ingress.kubernetes.io/scheme: "internet-facing"
      alb.ingress.kubernetes.io/target-type: "ip"
      alb.ingress.kubernetes.io/backend-protocol: "HTTPS"
      alb.ingress.kubernetes.io/listen-ports: "[{\"HTTPS\":443}]"
      alb.ingress.kubernetes.io/tags: "Environment=hub,GitOps=true"
    ingressClassName: "alb"
    hosts: [${host}]
    tls:
    - hosts: [${host}]
  ingressGrpc:
    enabled: true
    isAWSALB: true
    awsALB:
      serviceType: "ClusterIP" # Instance mode needs type NodePort, IP mode needs type ClusterIP or NodePort
      backendProtocolVersion: "GRPC" # This tells AWS to send traffic from the ALB using HTTP2. Can use gRPC as well if you want to leverage gRPC specific features

configs:
  params:
    application.namespaces: "cluster-*"
  cm:
    timeout.reconciliation: "180s"
    application.resourceTrackingMethod: "annotation" #use annotation for tracking required for Crossplane
    resource.exclusions: |
      - kinds:
        - ProviderConfigUsage
        apiGroups:
        - "*"
